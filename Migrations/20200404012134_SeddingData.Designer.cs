// <auto-generated />
using System;
using ISProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ISProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200404012134_SeddingData")]
    partial class SeddingData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("ISProject.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "Descripcion del producto1",
                            Name = "Producto1"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Descripcion del producto2",
                            Name = "Producto2"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Descripcion del producto3",
                            Name = "Producto3"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Descripcion del producto4",
                            Name = "Producto4"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Descripcion del producto5",
                            Name = "Producto5"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Descripcion del producto6",
                            Name = "Producto6"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Descripcion del producto7",
                            Name = "Producto7"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Descripcion del producto8",
                            Name = "Producto8"
                        },
                        new
                        {
                            Id = 90,
                            Description = "Descripcion del producto9",
                            Name = "Producto9"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Descripcion del producto10",
                            Name = "Producto10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("ProductSale");

                    b.HasData(
                        new
                        {
                            Id = 1003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 0,
                            ProductId = 10,
                            SellerId = "12",
                            Units = 1
                        },
                        new
                        {
                            Id = 2003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1,
                            ProductId = 20,
                            SellerId = "22",
                            Units = 2
                        },
                        new
                        {
                            Id = 3003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1,
                            ProductId = 30,
                            SellerId = "32",
                            Units = 3
                        },
                        new
                        {
                            Id = 4003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 2,
                            ProductId = 40,
                            SellerId = "42",
                            Units = 4
                        },
                        new
                        {
                            Id = 5003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 2,
                            ProductId = 50,
                            SellerId = "52",
                            Units = 5
                        },
                        new
                        {
                            Id = 6003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 3,
                            ProductId = 60,
                            SellerId = "62",
                            Units = 6
                        },
                        new
                        {
                            Id = 7003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 3,
                            ProductId = 70,
                            SellerId = "72",
                            Units = 7
                        },
                        new
                        {
                            Id = 8003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 4,
                            ProductId = 80,
                            SellerId = "82",
                            Units = 8
                        },
                        new
                        {
                            Id = 9003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 4,
                            ProductId = 90,
                            SellerId = "92",
                            Units = 9
                        },
                        new
                        {
                            Id = 10003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 5,
                            ProductId = 100,
                            SellerId = "102",
                            Units = 10
                        });
                });

            modelBuilder.Entity("ISProject.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductSaleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0Customer",
                            ConcurrencyStamp = "4a273499-f9c2-4fe9-bad4-44acb719f3e7",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "a18be9c0Manager",
                            ConcurrencyStamp = "7e49f0d3-52e3-446c-b9c7-15687417931b",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "a18be9c0Seller",
                            ConcurrencyStamp = "0368d1d7-2be7-4be8-a59b-e12091e28595",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "11",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "51",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "52",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "61",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "62",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "71",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "72",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "81",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "82",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "91",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "92",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "a18be9c0Seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ISProject.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "097864aa-cf6a-4a56-bfd3-cba7ec39ecd9",
                            Email = "Customer1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer1@fake.com",
                            NormalizedUserName = "Customer1",
                            PasswordHash = "AQAAAAEAACcQAAAAEPPh0NafLBX58K6E7TEWPhfmEmN9Jf2OSM/jbX6GTVUEAQde+OIbYY8FQkedyHAl9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer1",
                            Name = "Customer1"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "982bfa04-3996-4953-9421-ca218e58a726",
                            Email = "Customer2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer2@fake.com",
                            NormalizedUserName = "Customer2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHICsVPgEcWltLdlswV+uGzCCK5C79acz6x4JSHItRmbgRYC/E6rz00Wd++5+uGeTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer2",
                            Name = "Customer2"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e0b08c1-8256-486e-9bb3-5882af33ea00",
                            Email = "Customer3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer3@fake.com",
                            NormalizedUserName = "Customer3",
                            PasswordHash = "AQAAAAEAACcQAAAAEIcYw6wSQmplgVdU4eILEb+HmikbCx0PzbWbENcfkAQL3BSW9U+UgS40OJljXyn35Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer3",
                            Name = "Customer3"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50013b4a-a86b-491f-9a0f-b426947bed1b",
                            Email = "Customer4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer4@fake.com",
                            NormalizedUserName = "Customer4",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEWo6/538xBPOSN3DufE7CLNnl5fpMOc7ePMKqoYcy1d4SDQ+I56nsAThkk58Bu7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer4",
                            Name = "Customer4"
                        },
                        new
                        {
                            Id = "51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0129a8b-997c-427f-b780-d104ec322f0f",
                            Email = "Customer5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer5@fake.com",
                            NormalizedUserName = "Customer5",
                            PasswordHash = "AQAAAAEAACcQAAAAEM0wwCiMZWEEqt/KxV3ppM6IvLtt7xAaoVryOgJRe7EjzmbBo84Qm6pF6CnhBbt4BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer5",
                            Name = "Customer5"
                        },
                        new
                        {
                            Id = "61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03e46110-dcd2-47c4-b44d-6498d5f95993",
                            Email = "Customer6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer6@fake.com",
                            NormalizedUserName = "Customer6",
                            PasswordHash = "AQAAAAEAACcQAAAAEN4CLU1jx+FHvlvp5x45En2LlKxTlcwCzX9YCBZR2vApBimKZ9+wTxyw66ar9nFVXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer6",
                            Name = "Customer6"
                        },
                        new
                        {
                            Id = "71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5b0ffc3-1d21-46e4-8dd1-30d31aa9a05f",
                            Email = "Customer7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer7@fake.com",
                            NormalizedUserName = "Customer7",
                            PasswordHash = "AQAAAAEAACcQAAAAEBG/kzlM+OmtHjgVmR+ZHNgTP5SDzdec6OdfSvvIwC7I+89CzsGxCWG7zTiRtf29LA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer7",
                            Name = "Customer7"
                        },
                        new
                        {
                            Id = "81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "097491ad-0216-47f1-9caa-9806736ae84c",
                            Email = "Customer8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer8@fake.com",
                            NormalizedUserName = "Customer8",
                            PasswordHash = "AQAAAAEAACcQAAAAEE17XbNvLX5LBr5pX1EgPhPU+GKaggUWuJk91vj71DuWAhp4dws0DrnaGpN2ub8YQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer8",
                            Name = "Customer8"
                        },
                        new
                        {
                            Id = "91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd8f257c-5b1a-4ffa-8f8e-bbdc6e5604a2",
                            Email = "Customer9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer9@fake.com",
                            NormalizedUserName = "Customer9",
                            PasswordHash = "AQAAAAEAACcQAAAAENDLMfBolR87OauyBsN+WVZQeJNmTx0BEhdjE2kACQpceGhBHm6vd3yLnaalVq5/fQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer9",
                            Name = "Customer9"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "872301ac-6127-4420-b7bc-a28e614358d2",
                            Email = "Customer10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer10@fake.com",
                            NormalizedUserName = "Customer10",
                            PasswordHash = "AQAAAAEAACcQAAAAEDVgD4M2qxRgoSsBf8DW4UlaYYMqNA4QlI42Pn+/kvIaodm+QHUkmmyQ7XmaQ58mJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Customer10",
                            Name = "Customer10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Seller", b =>
                {
                    b.HasBaseType("ISProject.Models.User");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Seller");

                    b.HasData(
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8b55424-c9b7-4a30-9f7a-cde636c65eea",
                            Email = "Seller1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller1@fake.com",
                            NormalizedUserName = "Seller1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmBgrilJpMDDVmd+pZp8uv5Dz0DIKXq18dCIJ+camENoPkAareV/6U4RwyDpcSJJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller1",
                            Name = "Seller1",
                            Rating = 0
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebe4c87b-86de-402f-a689-146d3948d549",
                            Email = "Seller2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller2@fake.com",
                            NormalizedUserName = "Seller2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPM2njTwUMrpQyFlXkArkFRpN/7TPhB4QWJRilVP4m8ot3czx4XXUD3GQ6oZz/vxrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller2",
                            Name = "Seller2",
                            Rating = 0
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d282fa26-f5c2-47d3-ad3c-925e7254f708",
                            Email = "Seller3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller3@fake.com",
                            NormalizedUserName = "Seller3",
                            PasswordHash = "AQAAAAEAACcQAAAAEC8uHsgq+1YmdqoWiW5zva1UZq3NfWTq57cNasVmpkc+S7PhOsq92RSDi+9judG7bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller3",
                            Name = "Seller3",
                            Rating = 0
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbdff921-c806-4d4e-acf1-1e59afd8383b",
                            Email = "Seller4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller4@fake.com",
                            NormalizedUserName = "Seller4",
                            PasswordHash = "AQAAAAEAACcQAAAAENt0iktO9r6GGdJE4fp2FH5GXhaubeQsdjatnJZcGKm82ngkn7q1Qglhnp7+okJGCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller4",
                            Name = "Seller4",
                            Rating = 0
                        },
                        new
                        {
                            Id = "52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac771171-f0bc-4cda-83b9-61f8e69d1b6e",
                            Email = "Seller5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller5@fake.com",
                            NormalizedUserName = "Seller5",
                            PasswordHash = "AQAAAAEAACcQAAAAEJKMaXWKAC25BfAnKzJDW582o+8lnIzP/96gNF4X3y0TS1YIw/9cuzO9ItiT+OBqzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller5",
                            Name = "Seller5",
                            Rating = 0
                        },
                        new
                        {
                            Id = "62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64007f29-8eaf-4859-8ee7-b6c27bb54a56",
                            Email = "Seller6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller6@fake.com",
                            NormalizedUserName = "Seller6",
                            PasswordHash = "AQAAAAEAACcQAAAAEBdPbKWdsNMYKaIJJdV++z4UN6jc4HHjFfSacPjnAV6THeNPAZIo+xHgJD16XnuvMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller6",
                            Name = "Seller6",
                            Rating = 0
                        },
                        new
                        {
                            Id = "72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "863fb0ac-17ba-48fd-b953-bd0905c3a563",
                            Email = "Seller7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller7@fake.com",
                            NormalizedUserName = "Seller7",
                            PasswordHash = "AQAAAAEAACcQAAAAEBi3O5aWE2BO1Mq8XCEnXrIjoaG9Fo3VViDtF9vJnC8H/fCX9qV7tQnRL8xRWunfPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller7",
                            Name = "Seller7",
                            Rating = 0
                        },
                        new
                        {
                            Id = "82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9842f63-02cf-44c0-bae2-5a385af5ec77",
                            Email = "Seller8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller8@fake.com",
                            NormalizedUserName = "Seller8",
                            PasswordHash = "AQAAAAEAACcQAAAAEL6LlSCTj/35Vr6SKHpnmB0xWQyxfkkAHbP3GJGw98pQaAbPHt0xE/Jbir8TmbBOpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller8",
                            Name = "Seller8",
                            Rating = 0
                        },
                        new
                        {
                            Id = "92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebd0bbe8-3d9d-4c59-88e7-18b89806d9f8",
                            Email = "Seller9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller9@fake.com",
                            NormalizedUserName = "Seller9",
                            PasswordHash = "AQAAAAEAACcQAAAAEAPd4ZIuwvKJfKWNal8Jzxd7HT5VfZqiUong3bp/+w0XPdT0P2b/LfwEq4rp3jqQAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller9",
                            Name = "Seller9",
                            Rating = 0
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86a1fed1-7fef-4160-9475-097700f3f029",
                            Email = "Seller10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Seller10@fake.com",
                            NormalizedUserName = "Seller10",
                            PasswordHash = "AQAAAAEAACcQAAAAENyKtocpUGtywB+xOPO2T4Tbbot+1/cRmWCzHT8dLRIukYEpe0nXRBlSe9ObCQAqhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Seller10",
                            Name = "Seller10",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
