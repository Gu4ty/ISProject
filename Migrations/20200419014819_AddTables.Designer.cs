// <auto-generated />
using System;
using ISProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ISProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200419014819_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("ISProject.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NotiDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendToUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotiBuyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NotiBuyId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("ISProject.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "Descripcion del producto1",
                            Name = "Producto1"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Descripcion del producto2",
                            Name = "Producto2"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Descripcion del producto3",
                            Name = "Producto3"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Descripcion del producto4",
                            Name = "Producto4"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Descripcion del producto5",
                            Name = "Producto5"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Descripcion del producto6",
                            Name = "Producto6"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Descripcion del producto7",
                            Name = "Producto7"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Descripcion del producto8",
                            Name = "Producto8"
                        },
                        new
                        {
                            Id = 90,
                            Description = "Descripcion del producto9",
                            Name = "Producto9"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Descripcion del producto10",
                            Name = "Producto10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("ProductSale");

                    b.HasData(
                        new
                        {
                            Id = 1003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductId = 10,
                            SellerId = "12",
                            Units = 2
                        },
                        new
                        {
                            Id = 2003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductId = 20,
                            SellerId = "22",
                            Units = 3
                        },
                        new
                        {
                            Id = 3003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 9.0,
                            ProductId = 30,
                            SellerId = "32",
                            Units = 4
                        },
                        new
                        {
                            Id = 4003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 9.0,
                            ProductId = 40,
                            SellerId = "42",
                            Units = 5
                        },
                        new
                        {
                            Id = 5003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10.0,
                            ProductId = 50,
                            SellerId = "52",
                            Units = 6
                        },
                        new
                        {
                            Id = 6003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10.0,
                            ProductId = 60,
                            SellerId = "62",
                            Units = 7
                        },
                        new
                        {
                            Id = 7003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 70,
                            SellerId = "72",
                            Units = 8
                        },
                        new
                        {
                            Id = 8003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 80,
                            SellerId = "82",
                            Units = 9
                        },
                        new
                        {
                            Id = 9003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 12.0,
                            ProductId = 90,
                            SellerId = "92",
                            Units = 10
                        },
                        new
                        {
                            Id = 10003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 12.0,
                            ProductId = 100,
                            SellerId = "102",
                            Units = 11
                        });
                });

            modelBuilder.Entity("ISProject.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductSaleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0Customer",
                            ConcurrencyStamp = "b8a3897a-60cc-4b60-a185-f0635c884c9f",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "a18be9c0Manager",
                            ConcurrencyStamp = "e09bc067-3161-444e-b9c4-9bf7a23a6bcc",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "a18be9c0Seller",
                            ConcurrencyStamp = "b0c75242-5e76-46f9-af97-900f8946ec81",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "11",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "51",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "52",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "61",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "62",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "71",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "72",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "81",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "82",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "91",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "92",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21123111111",
                            RoleId = "a18be9c0Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("OrderHeaderID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OrderHeaderID");

                    b.HasDiscriminator().HasValue("NotiBuy");
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasIndex("UserID");

                    b.HasDiscriminator().HasValue("NotiRole");

                    b.HasData(
                        new
                        {
                            Id = 34,
                            Message = "Customer3 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "31"
                        },
                        new
                        {
                            Id = 64,
                            Message = "Customer6 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "61"
                        },
                        new
                        {
                            Id = 94,
                            Message = "Customer9 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.NotiSell", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("OrderDetailsID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OrderDetailsID");

                    b.HasDiscriminator().HasValue("NotiSell");
                });

            modelBuilder.Entity("ISProject.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f754484b-48ea-4524-bf3c-19825f48ffc9",
                            Email = "Customer1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER1@FAKE.COM",
                            NormalizedUserName = "CUSTOMER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXwiFL42gVLcsfe+BozNYoWHQGMpuHAR3O43oRDZoL7mZkDrxywaRCWKPflh4asmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b539febd-b9a4-42bb-8cde-a2c9207d7e07",
                            TwoFactorEnabled = false,
                            UserName = "Customer1@fake.com",
                            Name = "Customer1"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dd0f7e4-a1d0-418f-af3f-55f1260c4176",
                            Email = "Customer2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER2@FAKE.COM",
                            NormalizedUserName = "CUSTOMER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELv5jy6v8SlVcSCSJkUHZ1LovvMJJ/sNol4vNY0WnNTKB4kwpJ1gJQDVoDvYDWP2pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3535927e-9aa1-475d-9a8e-c271eb9a5991",
                            TwoFactorEnabled = false,
                            UserName = "Customer2@fake.com",
                            Name = "Customer2"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "688d9df5-85a8-4391-9e11-f81a9216e261",
                            Email = "Customer3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER3@FAKE.COM",
                            NormalizedUserName = "CUSTOMER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH1MqjtmYN3El72E+5Cj3NUN10R57BtMuxcYfPxHpFKB9hDeizmhVq7k/Wg/7vN1/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8e21719-b666-4939-9581-751dc0aebd0f",
                            TwoFactorEnabled = false,
                            UserName = "Customer3@fake.com",
                            Name = "Customer3"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73fc6a78-19eb-4508-b5ae-609774afa60f",
                            Email = "Customer4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER4@FAKE.COM",
                            NormalizedUserName = "CUSTOMER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKrIrecsP3HVpUp9sUqZ/qopVaqKO5kCbBeEn65vd3s0HdASoeuSjsxI7OwdPIod5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3fc1e43-7c9f-4bc8-a026-8e66884306e0",
                            TwoFactorEnabled = false,
                            UserName = "Customer4@fake.com",
                            Name = "Customer4"
                        },
                        new
                        {
                            Id = "51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e78a431b-1999-4338-ae83-e0984d88506c",
                            Email = "Customer5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER5@FAKE.COM",
                            NormalizedUserName = "CUSTOMER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG9oH2VbhGn11fs9UyYlfzH5SFM/1tSSLo/fMdqWv6xIreHT1yWkopUoCTfah4qSpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd5c4d34-f607-471c-82b8-9a280d79923e",
                            TwoFactorEnabled = false,
                            UserName = "Customer5@fake.com",
                            Name = "Customer5"
                        },
                        new
                        {
                            Id = "61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "252bbdad-f3b1-4915-a975-c4b37ccfeb7f",
                            Email = "Customer6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER6@FAKE.COM",
                            NormalizedUserName = "CUSTOMER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECb5N8bKknf9LYe7vqKGHHntz7ZIcwFR5t4FjbmTm57aOLMvAcFFlwY8ZtaSMUgtIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f427875-1234-4bf9-8f24-168f8547c2e1",
                            TwoFactorEnabled = false,
                            UserName = "Customer6@fake.com",
                            Name = "Customer6"
                        },
                        new
                        {
                            Id = "71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21648050-6f9d-46fa-9a8c-6aaf4debe85a",
                            Email = "Customer7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER7@FAKE.COM",
                            NormalizedUserName = "CUSTOMER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENrDMEP2yzrKWHHbHwyyeYN1jt1KJmkidj+IsV4zZljOhd2UJ0V6X20ytYwBf/PmKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a30a8111-127f-4481-af2d-63d7fa7bfb4e",
                            TwoFactorEnabled = false,
                            UserName = "Customer7@fake.com",
                            Name = "Customer7"
                        },
                        new
                        {
                            Id = "81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eaf57886-b8f4-4322-89ff-8eadec77e1ab",
                            Email = "Customer8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER8@FAKE.COM",
                            NormalizedUserName = "CUSTOMER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENQLEHYj7Myh0ojwsKB22LPLFs2VJy1KcSv13mXnBNwbJcpEFeOCk3eQ+7uZlkBVzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f03656b-7b7e-4955-ad94-082ab7e8d1c9",
                            TwoFactorEnabled = false,
                            UserName = "Customer8@fake.com",
                            Name = "Customer8"
                        },
                        new
                        {
                            Id = "91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "043f9a4a-04bb-4ebb-a85d-737bb336b0cb",
                            Email = "Customer9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER9@FAKE.COM",
                            NormalizedUserName = "CUSTOMER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHm5JbM4yrtVpV1o4wpMmgadfb+kE36/1YDtszo6yqJBeSk587drrcCewDneKQMiVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62fa42be-a684-4d20-a2e4-b4bfbe083382",
                            TwoFactorEnabled = false,
                            UserName = "Customer9@fake.com",
                            Name = "Customer9"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "277e84b7-a159-4456-84f7-c07b8299427f",
                            Email = "Customer10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER10@FAKE.COM",
                            NormalizedUserName = "CUSTOMER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKgctBDRvNTgGHsdayJMoePShI/JXfonhFQfedLaae8x/RBDHtlzfmaIQUFF1XuFyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e66fe49-f5b4-4301-bec8-97f4d3753634",
                            TwoFactorEnabled = false,
                            UserName = "Customer10@fake.com",
                            Name = "Customer10"
                        },
                        new
                        {
                            Id = "21123111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0edb3f9b-932b-4ec1-87dc-9b3ab6282264",
                            Email = "admin@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@FAKE.COM",
                            NormalizedUserName = "ADMIN@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH8uOl4ZS4rtq4x6bAmF671CuomAiEr1DqU2uuibu7V+/sIcXfBRzsQsU+z+xJvLfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71b66e98-e4f0-4d1a-8789-ce71e68e1cdd",
                            TwoFactorEnabled = false,
                            UserName = "admin@fake.com",
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Seller", b =>
                {
                    b.HasBaseType("ISProject.Models.User");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Seller");

                    b.HasData(
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "765f4617-41c1-476f-870e-dbdbcebb7442",
                            Email = "Seller1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER1@FAKE.COM",
                            NormalizedUserName = "SELLER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEODDQLnLvDmNFa5sGq3qR6LkLwBZyTg/VxMx7uAa3kWcSP8hKp/cdoVwTYlF4sZTtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b522cca-f516-43e1-9cc9-5cec71ac056e",
                            TwoFactorEnabled = false,
                            UserName = "Seller1@fake.com",
                            Name = "Seller1",
                            Rating = 0
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "006517df-4b6f-4fe9-aad9-96390262975b",
                            Email = "Seller2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER2@FAKE.COM",
                            NormalizedUserName = "SELLER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDhjeiMlt8vOHqWRbU1JUqfwTBrL7xIA6OcjolGSQbeBZfk0Ig/yR15j2PeztlTKRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2783476a-4214-4724-b303-e2b9d9e31251",
                            TwoFactorEnabled = false,
                            UserName = "Seller2@fake.com",
                            Name = "Seller2",
                            Rating = 0
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d09f9ec-37d3-4bad-ab17-c50a0da86c58",
                            Email = "Seller3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER3@FAKE.COM",
                            NormalizedUserName = "SELLER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjXq+5G5ssmn+jKZDZy8F649GJdlmDTg8RCXM14K1fm4em5abCCgRc5M3yyPRpN7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35e55de2-ccc9-4b5c-b1d0-659bcb4e5368",
                            TwoFactorEnabled = false,
                            UserName = "Seller3@fake.com",
                            Name = "Seller3",
                            Rating = 0
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f31fec12-d1ec-4244-8d80-c2c17e569c0d",
                            Email = "Seller4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER4@FAKE.COM",
                            NormalizedUserName = "SELLER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOnuUsusbBdoX79ZDYVBfBfqz6gc4Vw4jXRo+U8LJwGU/PmNyuPXYTvKCliwNT4N0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9487ea5a-306a-4129-b89b-d4edc5a5be2b",
                            TwoFactorEnabled = false,
                            UserName = "Seller4@fake.com",
                            Name = "Seller4",
                            Rating = 0
                        },
                        new
                        {
                            Id = "52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "798ec7bc-5e5e-461f-b752-eaffc0b4134a",
                            Email = "Seller5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER5@FAKE.COM",
                            NormalizedUserName = "SELLER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBD/8npTF2IFqP1SJHRrhS9RwwmAcPdJqA6sQkS6KHa1n4rh1INMNiuyJylkhnbDTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a65c0ada-077f-4b3c-b315-81e469877db8",
                            TwoFactorEnabled = false,
                            UserName = "Seller5@fake.com",
                            Name = "Seller5",
                            Rating = 0
                        },
                        new
                        {
                            Id = "62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3de51c9d-6ffe-436b-a7b3-825ef4566433",
                            Email = "Seller6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER6@FAKE.COM",
                            NormalizedUserName = "SELLER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZ/yO1GZu1qvYSisV+DtbpkndHpX5A1arY8VQAJpYA8YoGSGlBxrVOyMxmbgeItIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a99e7d2b-70db-496c-900b-a2d467665b31",
                            TwoFactorEnabled = false,
                            UserName = "Seller6@fake.com",
                            Name = "Seller6",
                            Rating = 0
                        },
                        new
                        {
                            Id = "72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8bed465-7696-40d8-a94c-5290c82a250e",
                            Email = "Seller7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER7@FAKE.COM",
                            NormalizedUserName = "SELLER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOaiC+5xBOI6PJb/m2+BcqRUYi3t0fy14f2F5A4qe0VdvLoCCdxzQwNH2uvtyUMKDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4921fed-8bd9-4524-b695-9a1def7914a7",
                            TwoFactorEnabled = false,
                            UserName = "Seller7@fake.com",
                            Name = "Seller7",
                            Rating = 0
                        },
                        new
                        {
                            Id = "82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c9f2936-acc8-4586-8e45-9fe2d1e364b7",
                            Email = "Seller8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER8@FAKE.COM",
                            NormalizedUserName = "SELLER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPu8NfWW3ABXgao69baFhQRq5N8+APnBuFCtvfK2QSTwKyuIkXGjeBsW7MmyfgTQWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6d9ae04-9bdf-4c5d-89e3-cae00415b757",
                            TwoFactorEnabled = false,
                            UserName = "Seller8@fake.com",
                            Name = "Seller8",
                            Rating = 0
                        },
                        new
                        {
                            Id = "92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3c45067-6ebb-4ae2-90bb-75207f9988c8",
                            Email = "Seller9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER9@FAKE.COM",
                            NormalizedUserName = "SELLER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBYlceTWhNBiS6tdeLBMcZ+YHBoSdqNNuYjtbeZuWZ8NliPlT1AgMYdRO1HR3PzW+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6c8b2b3-d7bb-40eb-81dc-f0dfb759bb5b",
                            TwoFactorEnabled = false,
                            UserName = "Seller9@fake.com",
                            Name = "Seller9",
                            Rating = 0
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0afb4a49-2798-4fcd-b0cc-c0d850384fad",
                            Email = "Seller10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER10@FAKE.COM",
                            NormalizedUserName = "SELLER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAMDu/5/wdo583KTSH7EAB9US0gNtGoHrUf/BzZOPKvjNEWC77Ob3MSleXK8BxArUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac4481c1-feb9-4971-b633-c13c30de88ad",
                            TwoFactorEnabled = false,
                            UserName = "Seller10@fake.com",
                            Name = "Seller10",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.HasOne("ISProject.Models.NotiBuy", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("NotiBuyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.ProductSale", "ProductSale")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ISProject.Models.NotiSell", b =>
                {
                    b.HasOne("ISProject.Models.OrderDetails", "OrderDetails")
                        .WithMany()
                        .HasForeignKey("OrderDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
