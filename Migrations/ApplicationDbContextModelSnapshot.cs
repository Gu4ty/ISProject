// <auto-generated />
using System;
using ISProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ISProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("ISProject.Models.AuctionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("PriceStep")
                        .HasColumnType("REAL");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("AuctionHeader");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            BeginDate = new DateTime(2020, 5, 3, 15, 27, 41, 137, DateTimeKind.Local).AddTicks(1728),
                            CurrentPrice = 4.0,
                            EndDate = new DateTime(2020, 5, 4, 2, 27, 41, 146, DateTimeKind.Local).AddTicks(9752),
                            PriceStep = 1.0,
                            Seen = false,
                            SellerId = "12"
                        },
                        new
                        {
                            Id = 35,
                            BeginDate = new DateTime(2020, 5, 3, 15, 27, 41, 194, DateTimeKind.Local).AddTicks(22),
                            CurrentPrice = 6.0,
                            EndDate = new DateTime(2020, 5, 4, 4, 27, 41, 194, DateTimeKind.Local).AddTicks(150),
                            PriceStep = 3.0,
                            Seen = false,
                            SellerId = "32"
                        },
                        new
                        {
                            Id = 55,
                            BeginDate = new DateTime(2020, 5, 3, 15, 27, 41, 240, DateTimeKind.Local).AddTicks(3249),
                            CurrentPrice = 8.0,
                            EndDate = new DateTime(2020, 5, 4, 6, 27, 41, 240, DateTimeKind.Local).AddTicks(3340),
                            PriceStep = 5.0,
                            Seen = false,
                            SellerId = "52"
                        },
                        new
                        {
                            Id = 75,
                            BeginDate = new DateTime(2020, 5, 3, 15, 27, 41, 284, DateTimeKind.Local).AddTicks(6759),
                            CurrentPrice = 10.0,
                            EndDate = new DateTime(2020, 5, 4, 8, 27, 41, 284, DateTimeKind.Local).AddTicks(6841),
                            PriceStep = 7.0,
                            Seen = false,
                            SellerId = "72"
                        },
                        new
                        {
                            Id = 95,
                            BeginDate = new DateTime(2020, 5, 3, 15, 27, 41, 329, DateTimeKind.Local).AddTicks(7635),
                            CurrentPrice = 12.0,
                            EndDate = new DateTime(2020, 5, 4, 10, 27, 41, 329, DateTimeKind.Local).AddTicks(7734),
                            PriceStep = 9.0,
                            Seen = false,
                            SellerId = "92"
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotiAuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("NotiAuctionId");

                    b.HasIndex("ProductId");

                    b.ToTable("AuctionProduct");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            AuctionId = 15,
                            ProductId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 100006,
                            AuctionId = 15,
                            ProductId = 20,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 36,
                            AuctionId = 35,
                            ProductId = 30,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 300006,
                            AuctionId = 35,
                            ProductId = 40,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 56,
                            AuctionId = 55,
                            ProductId = 50,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 500006,
                            AuctionId = 55,
                            ProductId = 60,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 76,
                            AuctionId = 75,
                            ProductId = 70,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 700006,
                            AuctionId = 75,
                            ProductId = 80,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 96,
                            AuctionId = 95,
                            ProductId = 90,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 900006,
                            AuctionId = 95,
                            ProductId = 100,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LastPriceOffered")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionUser");

                    b.HasData(
                        new
                        {
                            Id = 17,
                            AuctionId = 15,
                            LastPriceOffered = 4.0,
                            UserId = "11"
                        },
                        new
                        {
                            Id = 37,
                            AuctionId = 35,
                            LastPriceOffered = 6.0,
                            UserId = "31"
                        },
                        new
                        {
                            Id = 57,
                            AuctionId = 55,
                            LastPriceOffered = 8.0,
                            UserId = "51"
                        },
                        new
                        {
                            Id = 77,
                            AuctionId = 75,
                            LastPriceOffered = 10.0,
                            UserId = "71"
                        },
                        new
                        {
                            Id = 97,
                            AuctionId = 95,
                            LastPriceOffered = 12.0,
                            UserId = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NotiDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendToUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotiBuyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotiSellId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NotiBuyId");

                    b.HasIndex("NotiSellId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("ISProject.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "Descripcion del producto1",
                            Name = "Producto1"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Descripcion del producto2",
                            Name = "Producto2"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Descripcion del producto3",
                            Name = "Producto3"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Descripcion del producto4",
                            Name = "Producto4"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Descripcion del producto5",
                            Name = "Producto5"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Descripcion del producto6",
                            Name = "Producto6"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Descripcion del producto7",
                            Name = "Producto7"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Descripcion del producto8",
                            Name = "Producto8"
                        },
                        new
                        {
                            Id = 90,
                            Description = "Descripcion del producto9",
                            Name = "Producto9"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Descripcion del producto10",
                            Name = "Producto10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("ProductSale");

                    b.HasData(
                        new
                        {
                            Id = 1003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductId = 10,
                            SellerId = "12",
                            Units = 2
                        },
                        new
                        {
                            Id = 2003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductId = 20,
                            SellerId = "22",
                            Units = 3
                        },
                        new
                        {
                            Id = 3003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 9.0,
                            ProductId = 30,
                            SellerId = "32",
                            Units = 4
                        },
                        new
                        {
                            Id = 4003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 9.0,
                            ProductId = 40,
                            SellerId = "42",
                            Units = 5
                        },
                        new
                        {
                            Id = 5003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10.0,
                            ProductId = 50,
                            SellerId = "52",
                            Units = 6
                        },
                        new
                        {
                            Id = 6003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10.0,
                            ProductId = 60,
                            SellerId = "62",
                            Units = 7
                        },
                        new
                        {
                            Id = 7003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 70,
                            SellerId = "72",
                            Units = 8
                        },
                        new
                        {
                            Id = 8003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 80,
                            SellerId = "82",
                            Units = 9
                        },
                        new
                        {
                            Id = 9003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 12.0,
                            ProductId = 90,
                            SellerId = "92",
                            Units = 10
                        },
                        new
                        {
                            Id = 10003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 12.0,
                            ProductId = 100,
                            SellerId = "102",
                            Units = 11
                        },
                        new
                        {
                            Id = 80003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 10,
                            SellerId = "82",
                            Units = 9
                        });
                });

            modelBuilder.Entity("ISProject.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductSaleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0Customer",
                            ConcurrencyStamp = "eea47cf2-f045-4054-bfd7-d606eb752ecc",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "a18be9c0Manager",
                            ConcurrencyStamp = "6fb375e7-6705-4dcd-a759-bf1889426490",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "a18be9c0Seller",
                            ConcurrencyStamp = "8984b2c9-1bf1-43dd-9cd3-e5061caa062f",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "11",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "51",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "52",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "61",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "62",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "71",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "72",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "81",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "82",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "91",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "92",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21123111111",
                            RoleId = "a18be9c0Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ISProject.Models.NotiAuction", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("AuctionHeaderID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AuctionHeaderID");

                    b.HasDiscriminator().HasValue("NotiAuction");
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("OrderHeaderID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OrderHeaderID");

                    b.HasDiscriminator().HasValue("NotiBuy");
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasIndex("UserID");

                    b.HasDiscriminator().HasValue("NotiRole");

                    b.HasData(
                        new
                        {
                            Id = 34,
                            Message = "Customer3 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "31"
                        },
                        new
                        {
                            Id = 64,
                            Message = "Customer6 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "61"
                        },
                        new
                        {
                            Id = 94,
                            Message = "Customer9 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.NotiSell", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.HasDiscriminator().HasValue("NotiSell");
                });

            modelBuilder.Entity("ISProject.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00722d71-7355-4ffb-8309-d42f1a8e5d71",
                            Email = "Customer1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER1@FAKE.COM",
                            NormalizedUserName = "CUSTOMER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC8W327vDtDy155R9PEl3LQGd7kW0P6OdOonDYIlgM4WS80LDDt3kmsy6pztXMb4rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69b836a8-3e91-484e-b9c1-86c17d258974",
                            TwoFactorEnabled = false,
                            UserName = "Customer1@fake.com",
                            Name = "Customer1"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "787008e2-7f56-42fd-81f0-2fc5d3a7fc04",
                            Email = "Customer2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER2@FAKE.COM",
                            NormalizedUserName = "CUSTOMER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDtIx0n79EjmzJlhSannEeR9OCSCNuF96VC6Ue1HLDiUCKqq6WRUcbUUnlI8ClfsxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4eeba85b-3b0c-40ef-af21-47b832d17c72",
                            TwoFactorEnabled = false,
                            UserName = "Customer2@fake.com",
                            Name = "Customer2"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a55f57a1-facd-4c6a-8423-b9accd50e5af",
                            Email = "Customer3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER3@FAKE.COM",
                            NormalizedUserName = "CUSTOMER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJXGuS60UDSSS7GUOealU8oHaNmtaRJx/GGHUajno/KPp2qX/krFq4g3SlGn4xv3Vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a22de77-270e-49f2-a250-b0856e166bcb",
                            TwoFactorEnabled = false,
                            UserName = "Customer3@fake.com",
                            Name = "Customer3"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2ce4c1a-d287-4558-aeab-e341ea2c4ebc",
                            Email = "Customer4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER4@FAKE.COM",
                            NormalizedUserName = "CUSTOMER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQWv0maz7P9539p/W1B8b/MrhMvMigbDZbcTkon1CR1xtCL68obDaUr92O+HtyzLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f938c1ee-98c9-4ccf-8c5f-6320ed5c6276",
                            TwoFactorEnabled = false,
                            UserName = "Customer4@fake.com",
                            Name = "Customer4"
                        },
                        new
                        {
                            Id = "51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2602cc88-9e4a-45e9-8510-385c38223a9b",
                            Email = "Customer5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER5@FAKE.COM",
                            NormalizedUserName = "CUSTOMER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbNetTUmUyDXyAYUhqyB6pWgFZOCDluxVgJMsp5UEpp+5YjX7baWcxxdO//6Fn33w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5470621c-c92d-48b5-b69e-ec7266083e29",
                            TwoFactorEnabled = false,
                            UserName = "Customer5@fake.com",
                            Name = "Customer5"
                        },
                        new
                        {
                            Id = "61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d5ec233-dc32-407b-b3a5-3394c8782729",
                            Email = "Customer6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER6@FAKE.COM",
                            NormalizedUserName = "CUSTOMER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMdo+0qjDPDmSA61nAYcT7cFQ+qRgQoDtDz08JyagbNZzfXd8nUMHJr5Ed3tPXFWeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8026ece6-f273-45fb-b661-eec3a7f4c1ec",
                            TwoFactorEnabled = false,
                            UserName = "Customer6@fake.com",
                            Name = "Customer6"
                        },
                        new
                        {
                            Id = "71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d736da8-5651-4a98-9eaf-efa767114df3",
                            Email = "Customer7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER7@FAKE.COM",
                            NormalizedUserName = "CUSTOMER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDloJlPI2I/9s03pMMHUtY+AYIasIOouhqfARL93S5ohCPwVX9E9GYmRJixeIpMeKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "369d9ebc-d385-45c8-bb4e-d829ceef0115",
                            TwoFactorEnabled = false,
                            UserName = "Customer7@fake.com",
                            Name = "Customer7"
                        },
                        new
                        {
                            Id = "81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5d0625b-f904-4ad9-b8a8-489ff6aeece3",
                            Email = "Customer8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER8@FAKE.COM",
                            NormalizedUserName = "CUSTOMER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfmZnbQb1vhb2khMKoGI60Uh4A6LURehjkpY6cX43ggg+wPNTcHROiVNB8C34i8Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24b55dcb-8abf-4688-81fb-e5b86e36cf91",
                            TwoFactorEnabled = false,
                            UserName = "Customer8@fake.com",
                            Name = "Customer8"
                        },
                        new
                        {
                            Id = "91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8cb8ab7-ef21-4eca-aca2-437d791c11af",
                            Email = "Customer9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER9@FAKE.COM",
                            NormalizedUserName = "CUSTOMER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECSQ/jRIyymwOJMWE80lOQzvXUacXMLYaMzde+SPIyEO541h+fAI+GvZWSKIIlJBUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4b32db8-b19d-43bb-a3af-633449311f9a",
                            TwoFactorEnabled = false,
                            UserName = "Customer9@fake.com",
                            Name = "Customer9"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e629a4f-898b-44dc-8764-024728a8b9f7",
                            Email = "Customer10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER10@FAKE.COM",
                            NormalizedUserName = "CUSTOMER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKgjq3Adz5WRCiQfK3FAfysxgFUvPlvXhlmAV4SW85btC/fn4gvV75vRnHzzCZEKJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b038f42b-34ab-46a6-8159-3831fc792207",
                            TwoFactorEnabled = false,
                            UserName = "Customer10@fake.com",
                            Name = "Customer10"
                        },
                        new
                        {
                            Id = "21123111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94ec3686-67b6-4be1-8aa1-e7b4dd7c9be0",
                            Email = "admin@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@FAKE.COM",
                            NormalizedUserName = "ADMIN@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBgs0I8dMIaY1AQuf85nffz14W1SM+DpGGI4VjsP3zEtuv2gpF80h8at4kCV/nYFYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1412752e-89b5-4513-af95-d0fefc40202c",
                            TwoFactorEnabled = false,
                            UserName = "admin@fake.com",
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Seller", b =>
                {
                    b.HasBaseType("ISProject.Models.User");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Seller");

                    b.HasData(
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc4f7e56-9c5b-4d63-a33c-1388fb1b93e5",
                            Email = "Seller1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER1@FAKE.COM",
                            NormalizedUserName = "SELLER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLDbG72fQLLSXKOOJw5H4631qx5fXVuqPJsto0PvPghCjn7bV8x4QQXoA0yMh2xzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3515af89-a137-4022-aea7-32eb5debcc0a",
                            TwoFactorEnabled = false,
                            UserName = "Seller1@fake.com",
                            Name = "Seller1",
                            Rating = 0
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fdcb22b-72d0-4efb-ac42-1c2887acce81",
                            Email = "Seller2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER2@FAKE.COM",
                            NormalizedUserName = "SELLER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAhJv7TGE2iTx3qNe2QotgeIcuKKJad9L6Og2peyT6fDvg56Tu7f8N2MfNV5PIQYFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2357ed7d-af6f-4741-9abc-646d65ff6df1",
                            TwoFactorEnabled = false,
                            UserName = "Seller2@fake.com",
                            Name = "Seller2",
                            Rating = 0
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "295d2a2c-5d30-40ae-9e06-153d89b80ff5",
                            Email = "Seller3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER3@FAKE.COM",
                            NormalizedUserName = "SELLER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAiC9PDQZ4eBCxqInfiv+PueEp9fzO4/Y/aNTv4IFHvDbKAijijKYGj3cHnkrOU1dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0db80e8c-91d0-41d1-b304-6d5443fd2b91",
                            TwoFactorEnabled = false,
                            UserName = "Seller3@fake.com",
                            Name = "Seller3",
                            Rating = 0
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa511b9d-e36e-477a-8258-be1e11ac30ee",
                            Email = "Seller4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER4@FAKE.COM",
                            NormalizedUserName = "SELLER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHqBMZ56WcAUIlajgXeEjYfNrYWoi8TJReROZmkmro0RiWNa1MxGzJ3MVa+fw4ZWhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd91bf05-c439-4ada-9838-f576af98f399",
                            TwoFactorEnabled = false,
                            UserName = "Seller4@fake.com",
                            Name = "Seller4",
                            Rating = 0
                        },
                        new
                        {
                            Id = "52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d3d86b3-3c5b-4ce2-92cd-7114c74aa002",
                            Email = "Seller5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER5@FAKE.COM",
                            NormalizedUserName = "SELLER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC6kw2Teei6VRmrkc89VdIgymf2bLCgFXdvpCfOjxBv0Zi2dxYxv7v+rdPHHcRHAsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5a9020f-27c0-4865-82d3-f7692eaf8596",
                            TwoFactorEnabled = false,
                            UserName = "Seller5@fake.com",
                            Name = "Seller5",
                            Rating = 0
                        },
                        new
                        {
                            Id = "62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f6409f9-e18b-4853-94f6-baeaa2efe1b7",
                            Email = "Seller6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER6@FAKE.COM",
                            NormalizedUserName = "SELLER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED7u42xHpFp7FuDTR001LcIcFIi3QbP9jKbsUuDGeoxho+dfo8u7t9RD5uoGaPwn0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4facf28-8ed0-4dba-b091-f120aa26b5f7",
                            TwoFactorEnabled = false,
                            UserName = "Seller6@fake.com",
                            Name = "Seller6",
                            Rating = 0
                        },
                        new
                        {
                            Id = "72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffa0afb6-d826-45b2-9a2f-3e8fef5ca1a4",
                            Email = "Seller7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER7@FAKE.COM",
                            NormalizedUserName = "SELLER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHHczlcyX6P6qkar31BK/dcy4SqBu3xXJbPtgpeRH5MYfp6JXq4BpMc/Cvr7Zb+SPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20cbecd3-4248-4d03-958d-f8b1b7d327ec",
                            TwoFactorEnabled = false,
                            UserName = "Seller7@fake.com",
                            Name = "Seller7",
                            Rating = 0
                        },
                        new
                        {
                            Id = "82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba76e844-f024-438c-b96e-276f77a95cf3",
                            Email = "Seller8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER8@FAKE.COM",
                            NormalizedUserName = "SELLER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEADMtyWxdwcK+q9kZ3TdyskQaZsX5crJija9WKbUSvQT9WccaOegy8v274Ys7tjemQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f86a6c4b-f68f-4de7-af87-dab10c38505f",
                            TwoFactorEnabled = false,
                            UserName = "Seller8@fake.com",
                            Name = "Seller8",
                            Rating = 0
                        },
                        new
                        {
                            Id = "92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a612e6c5-69f3-4dda-b432-9db8b46c3302",
                            Email = "Seller9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER9@FAKE.COM",
                            NormalizedUserName = "SELLER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGNBIHrNEWg2cc78xHlkQ+8XXTrgvhx8pXRbAJTHvLZmxmHio+hAmlzD+0AIqkBaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd6e9674-afee-4852-a786-5e593673cef4",
                            TwoFactorEnabled = false,
                            UserName = "Seller9@fake.com",
                            Name = "Seller9",
                            Rating = 0
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8081b155-2a7d-4def-8777-a32c0701d9f2",
                            Email = "Seller10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER10@FAKE.COM",
                            NormalizedUserName = "SELLER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIEnW4SG25+6PrKhBjGSCh1dsXPuZK++Rgw2RxjJv3XCNfHsk1ThhIwlSzlt77291Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0667b36-ca94-4002-870f-41831755d564",
                            TwoFactorEnabled = false,
                            UserName = "Seller10@fake.com",
                            Name = "Seller10",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionHeader", b =>
                {
                    b.HasOne("ISProject.Models.Seller", "User")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.AuctionProduct", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.NotiAuction", null)
                        .WithMany("AuctionProduct")
                        .HasForeignKey("NotiAuctionId");

                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.AuctionUser", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.HasOne("ISProject.Models.NotiBuy", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("NotiBuyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ISProject.Models.NotiSell", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("NotiSellId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.ProductSale", "ProductSale")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiAuction", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
