// <auto-generated />
using System;
using ISProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ISProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("ISProject.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NotiDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendToUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("ISProject.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "Descripcion del producto1",
                            Name = "Producto1"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Descripcion del producto2",
                            Name = "Producto2"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Descripcion del producto3",
                            Name = "Producto3"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Descripcion del producto4",
                            Name = "Producto4"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Descripcion del producto5",
                            Name = "Producto5"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Descripcion del producto6",
                            Name = "Producto6"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Descripcion del producto7",
                            Name = "Producto7"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Descripcion del producto8",
                            Name = "Producto8"
                        },
                        new
                        {
                            Id = 90,
                            Description = "Descripcion del producto9",
                            Name = "Producto9"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Descripcion del producto10",
                            Name = "Producto10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("ProductSale");

                    b.HasData(
                        new
                        {
                            Id = 1003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 0.0,
                            ProductId = 10,
                            SellerId = "12",
                            Units = 1
                        },
                        new
                        {
                            Id = 2003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1.0,
                            ProductId = 20,
                            SellerId = "22",
                            Units = 2
                        },
                        new
                        {
                            Id = 3003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1.0,
                            ProductId = 30,
                            SellerId = "32",
                            Units = 3
                        },
                        new
                        {
                            Id = 4003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 2.0,
                            ProductId = 40,
                            SellerId = "42",
                            Units = 4
                        },
                        new
                        {
                            Id = 5003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 2.0,
                            ProductId = 50,
                            SellerId = "52",
                            Units = 5
                        },
                        new
                        {
                            Id = 6003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 3.0,
                            ProductId = 60,
                            SellerId = "62",
                            Units = 6
                        },
                        new
                        {
                            Id = 7003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 3.0,
                            ProductId = 70,
                            SellerId = "72",
                            Units = 7
                        },
                        new
                        {
                            Id = 8003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 4.0,
                            ProductId = 80,
                            SellerId = "82",
                            Units = 8
                        },
                        new
                        {
                            Id = 9003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 4.0,
                            ProductId = 90,
                            SellerId = "92",
                            Units = 9
                        },
                        new
                        {
                            Id = 10003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 5.0,
                            ProductId = 100,
                            SellerId = "102",
                            Units = 10
                        });
                });

            modelBuilder.Entity("ISProject.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductSaleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0Customer",
                            ConcurrencyStamp = "96361fb3-ff00-4e22-b6af-9e1da9104019",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "a18be9c0Manager",
                            ConcurrencyStamp = "7a5374d4-ad79-4d5e-aa2e-5a343dc0e4cf",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "a18be9c0Seller",
                            ConcurrencyStamp = "1225ba3a-7ccb-431f-a976-eeacdb74b000",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "11",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "51",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "52",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "61",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "62",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "71",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "72",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "81",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "82",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "91",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "92",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21123111111",
                            RoleId = "a18be9c0Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasIndex("UserID");

                    b.HasDiscriminator().HasValue("NotiRole");

                    b.HasData(
                        new
                        {
                            Id = 34,
                            Message = "Customer3wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "31"
                        },
                        new
                        {
                            Id = 64,
                            Message = "Customer6wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "61"
                        },
                        new
                        {
                            Id = 94,
                            Message = "Customer9wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb6c1210-083b-4d17-98bc-f6041b6b2003",
                            Email = "Customer1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER1@FAKE.COM",
                            NormalizedUserName = "CUSTOMER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMXRDnA+PabMgemEueiTTOleOV39cqfsut3WQgUXYuiK3iHxdPTPfcdHdQMRSpMmkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "989a6efd-c33b-445f-bc76-cd65c3824232",
                            TwoFactorEnabled = false,
                            UserName = "Customer1@fake.com",
                            Name = "Customer1"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fcd15a4-0898-4024-9ae1-3aede86e2214",
                            Email = "Customer2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER2@FAKE.COM",
                            NormalizedUserName = "CUSTOMER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDfej+irs2rMa/0nQSD4YKk722X2qLqaN6q6uKg+6ha+X3CjdOCLriNPQuG/5BWkDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ce5f9f6-ce5a-47c0-9a2e-7c7d5e79a47d",
                            TwoFactorEnabled = false,
                            UserName = "Customer2@fake.com",
                            Name = "Customer2"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f0ad0a9-12e8-4294-8997-869728336da8",
                            Email = "Customer3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER3@FAKE.COM",
                            NormalizedUserName = "CUSTOMER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPltnYe4w7S5erNgmv+PeZ7DKCwkMiICATAAZkjFwifdBCRmN17nESMiyRtnxhKTyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b5e424c-b0dc-47bd-be05-185eb5d11200",
                            TwoFactorEnabled = false,
                            UserName = "Customer3@fake.com",
                            Name = "Customer3"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50ac7ade-619d-4887-bf92-6f92ac0a0725",
                            Email = "Customer4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER4@FAKE.COM",
                            NormalizedUserName = "CUSTOMER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEXv2bhZFKeKtUNON86XupDJBkluPlwJqnFEXsUBECRKBaeIQpbmCFmPf5QvZTAMPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5820094-547d-466e-92c8-56da3f805ab9",
                            TwoFactorEnabled = false,
                            UserName = "Customer4@fake.com",
                            Name = "Customer4"
                        },
                        new
                        {
                            Id = "51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45f4315e-fc2b-46be-b87d-21a195e74493",
                            Email = "Customer5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER5@FAKE.COM",
                            NormalizedUserName = "CUSTOMER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENiaEo+mFtwL6MTWV/hG+ERURda9AIrq7UhSLyvf1J/fJkB1FTJDd+n15ecAwQVEZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec55f0ac-3f73-4eba-8301-d7b83849c1db",
                            TwoFactorEnabled = false,
                            UserName = "Customer5@fake.com",
                            Name = "Customer5"
                        },
                        new
                        {
                            Id = "61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dc4575c-3214-40b5-a6a1-553fec542402",
                            Email = "Customer6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER6@FAKE.COM",
                            NormalizedUserName = "CUSTOMER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHAUkIqzXeXyNmUdnFYdmjvHVkaiTCzS8/5ptKNYP/8v2CjeHI0uv4Ir0+0ybrqIFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc2d07f0-b250-47a4-8946-e8c89c8cc954",
                            TwoFactorEnabled = false,
                            UserName = "Customer6@fake.com",
                            Name = "Customer6"
                        },
                        new
                        {
                            Id = "71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f05a942-ac11-4442-8837-611fbd2d86c3",
                            Email = "Customer7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER7@FAKE.COM",
                            NormalizedUserName = "CUSTOMER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBBRRvXdHXr02Yw3p2+KOyu6Q9j9rcMxmjzCSpHQD6CTm9RxiA4c7NnVFapyCnUJPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41d21e6a-ebd6-47f3-870e-774d1714f889",
                            TwoFactorEnabled = false,
                            UserName = "Customer7@fake.com",
                            Name = "Customer7"
                        },
                        new
                        {
                            Id = "81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77f48267-5289-4e50-b87c-4952c411797b",
                            Email = "Customer8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER8@FAKE.COM",
                            NormalizedUserName = "CUSTOMER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9F+J6Z+LN2Ed4qg+zPkxDCJCwriNS58gm7oU7MjAzgD+leIjzg8IoYmToA/aSCdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85db8f2f-10f2-4341-9ef7-d1e9d6547629",
                            TwoFactorEnabled = false,
                            UserName = "Customer8@fake.com",
                            Name = "Customer8"
                        },
                        new
                        {
                            Id = "91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f60f23a2-d488-4df2-903f-b12fd0ab040c",
                            Email = "Customer9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER9@FAKE.COM",
                            NormalizedUserName = "CUSTOMER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHeKiGsqrCDSLcil7mAMSHPsCo3kP34O5G2fqMutjmeHIsZiTmY7iCwTXtVgq4IOzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b99392c0-2b15-4854-a070-33b57bdd261d",
                            TwoFactorEnabled = false,
                            UserName = "Customer9@fake.com",
                            Name = "Customer9"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe1c83a7-d33f-46ee-991b-6ed6896ed15e",
                            Email = "Customer10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER10@FAKE.COM",
                            NormalizedUserName = "CUSTOMER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIZrQXylxEsiKTJogHMC4CWzOjzMGGsHGpAn5sAZixEQMco5P9Qb7r4V7VXyF1uPpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "073adf47-2455-4dbd-a7db-f53ee431a8bd",
                            TwoFactorEnabled = false,
                            UserName = "Customer10@fake.com",
                            Name = "Customer10"
                        },
                        new
                        {
                            Id = "21123111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d95d6e84-686e-4ff8-8e16-342b1c8766a5",
                            Email = "admin@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@FAKE.COM",
                            NormalizedUserName = "ADMIN@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYo0sWlQAX75m9XmsEDbkT//7uoHvHw+clmP+bSo2pq5M89/OJwxla4QzuwDC9U3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0be04518-3e25-4a8e-b802-ef24fb420062",
                            TwoFactorEnabled = false,
                            UserName = "admin@fake.com",
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Seller", b =>
                {
                    b.HasBaseType("ISProject.Models.User");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Seller");

                    b.HasData(
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2c0af7d-7268-4d1d-ad36-5f4d6a2691dc",
                            Email = "Seller1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER1@FAKE.COM",
                            NormalizedUserName = "SELLER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKSePl51XAvtGqmGKDY+fKAmNti8sxbUVuT6OEk8Yk7qMl0NEeG9RvH2IYZgxfksmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b963c9aa-0e50-44e5-8e3c-654540746236",
                            TwoFactorEnabled = false,
                            UserName = "Seller1@fake.com",
                            Name = "Seller1",
                            Rating = 0
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3da20b6-3ac1-45cc-b7b2-c999137e2491",
                            Email = "Seller2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER2@FAKE.COM",
                            NormalizedUserName = "SELLER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENLlrsdvCOyU7FgJZ323EzDQlwhCzHiUSIRMb9Uh8SQy6B8m0meFfECxjGsXzDXuEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da967573-3f49-4118-a9c4-3ff29982146b",
                            TwoFactorEnabled = false,
                            UserName = "Seller2@fake.com",
                            Name = "Seller2",
                            Rating = 0
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2dc77f9-e0d7-471c-b340-c77be4c005b5",
                            Email = "Seller3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER3@FAKE.COM",
                            NormalizedUserName = "SELLER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7jGet5TvtNUJmhp10nfRJhp8gwhfBYttVOzl3nzcJNfj1m3GTUKbesXPo5+6g8bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5af4334f-4f12-4e64-afd9-62e4ecd909fd",
                            TwoFactorEnabled = false,
                            UserName = "Seller3@fake.com",
                            Name = "Seller3",
                            Rating = 0
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f021ef40-510e-4f0f-a6fb-a798dc45c405",
                            Email = "Seller4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER4@FAKE.COM",
                            NormalizedUserName = "SELLER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ4WSwQEoH4pLilnXSGA9hkRoXAWv1BBpZM41NMhvWhbc7cQVudRyVk8mTsSymSlbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d05c6fb-0f60-4760-8d6b-c607b8a14904",
                            TwoFactorEnabled = false,
                            UserName = "Seller4@fake.com",
                            Name = "Seller4",
                            Rating = 0
                        },
                        new
                        {
                            Id = "52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "170bf911-b649-4044-bfa1-57d4ced1d3c6",
                            Email = "Seller5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER5@FAKE.COM",
                            NormalizedUserName = "SELLER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBcuGdI/PhDexPMVoF1qg8IFuZj+8O9dO2jEmBFrcseR6lG2ckVJqoMwysyKRfMohQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cd1ced5-d39a-4510-98ce-838cb3f7ed6d",
                            TwoFactorEnabled = false,
                            UserName = "Seller5@fake.com",
                            Name = "Seller5",
                            Rating = 0
                        },
                        new
                        {
                            Id = "62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60dadf9d-3657-4111-94e6-8d6a40578034",
                            Email = "Seller6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER6@FAKE.COM",
                            NormalizedUserName = "SELLER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM95csMedSpMzB8L9jjaxXR08BkL7zNnjbAGMR2P9M3lc3dxCqlbnv+f/+nC9OG7LQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e633d66e-72d5-40b4-a1e8-7a45e3c16cce",
                            TwoFactorEnabled = false,
                            UserName = "Seller6@fake.com",
                            Name = "Seller6",
                            Rating = 0
                        },
                        new
                        {
                            Id = "72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d3f45b1-7705-4918-87be-bf02389e6ad2",
                            Email = "Seller7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER7@FAKE.COM",
                            NormalizedUserName = "SELLER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5eSaQlhfEg7BD9M/bQjnf1O4R5U6VyRgXjMM2X7Mm3peDXnBesvKZ9mU1TwxTpjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14db3359-c257-4298-810c-644effefa701",
                            TwoFactorEnabled = false,
                            UserName = "Seller7@fake.com",
                            Name = "Seller7",
                            Rating = 0
                        },
                        new
                        {
                            Id = "82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "732885cd-2a92-4032-b507-538b02fcd94f",
                            Email = "Seller8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER8@FAKE.COM",
                            NormalizedUserName = "SELLER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNG3Tqr02tf+34Ry09lb80x+h1BNBbnvgTdyu01Fn6+j2YIunRKjKoP90RMUJMPKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99b54df9-0faf-41e3-beb3-4c5103b86136",
                            TwoFactorEnabled = false,
                            UserName = "Seller8@fake.com",
                            Name = "Seller8",
                            Rating = 0
                        },
                        new
                        {
                            Id = "92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8b19788-74cf-44a8-9b30-adfc83f400cc",
                            Email = "Seller9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER9@FAKE.COM",
                            NormalizedUserName = "SELLER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMnGARmJCqWpBjX+FhP0pIr8K27bijeTl8Ottdr+HKBS2JZ0lzB+sA3jSTAddoFCoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "466210f8-0398-4559-ba3a-5171861ac4c9",
                            TwoFactorEnabled = false,
                            UserName = "Seller9@fake.com",
                            Name = "Seller9",
                            Rating = 0
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c17683b-1210-40a0-af41-1f26fed52386",
                            Email = "Seller10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER10@FAKE.COM",
                            NormalizedUserName = "SELLER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7vKH9uP2sfNMHhQOmIXiZ2MihBXlJRJg5aeSF7ny0LlNtHawDuZvXa1Ze95h8ZEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "609a9e09-57d9-4df1-8b23-c0b50bb7526e",
                            TwoFactorEnabled = false,
                            UserName = "Seller10@fake.com",
                            Name = "Seller10",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.ProductSale", "ProductSale")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
