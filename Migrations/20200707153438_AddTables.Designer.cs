// <auto-generated />
using System;
using ISProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ISProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200707153438_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("ISProject.Models.AuctionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("PriceStep")
                        .HasColumnType("REAL");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("AuctionHeader");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            BeginDate = new DateTime(2020, 7, 7, 16, 34, 37, 204, DateTimeKind.Local).AddTicks(162),
                            CurrentPrice = 1.0,
                            EndDate = new DateTime(2020, 7, 7, 22, 34, 37, 212, DateTimeKind.Local).AddTicks(7981),
                            PriceStep = 1.0,
                            Seen = false,
                            SellerId = "12"
                        },
                        new
                        {
                            Id = 35,
                            BeginDate = new DateTime(2020, 7, 7, 11, 34, 37, 254, DateTimeKind.Local).AddTicks(2350),
                            CurrentPrice = 6.0,
                            EndDate = new DateTime(2020, 7, 7, 11, 34, 37, 254, DateTimeKind.Local).AddTicks(2523),
                            PriceStep = 3.0,
                            Seen = false,
                            SellerId = "32"
                        },
                        new
                        {
                            Id = 55,
                            BeginDate = new DateTime(2020, 7, 7, 11, 34, 37, 296, DateTimeKind.Local).AddTicks(9298),
                            CurrentPrice = 8.0,
                            EndDate = new DateTime(2020, 7, 7, 11, 34, 37, 296, DateTimeKind.Local).AddTicks(9422),
                            PriceStep = 5.0,
                            Seen = false,
                            SellerId = "52"
                        },
                        new
                        {
                            Id = 75,
                            BeginDate = new DateTime(2020, 7, 7, 11, 34, 37, 339, DateTimeKind.Local).AddTicks(7141),
                            CurrentPrice = 10.0,
                            EndDate = new DateTime(2020, 7, 8, 4, 34, 37, 339, DateTimeKind.Local).AddTicks(7844),
                            PriceStep = 7.0,
                            Seen = false,
                            SellerId = "72"
                        },
                        new
                        {
                            Id = 95,
                            BeginDate = new DateTime(2020, 7, 7, 11, 34, 37, 388, DateTimeKind.Local).AddTicks(5799),
                            CurrentPrice = 12.0,
                            EndDate = new DateTime(2020, 7, 8, 6, 34, 37, 388, DateTimeKind.Local).AddTicks(6279),
                            PriceStep = 9.0,
                            Seen = false,
                            SellerId = "92"
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotiAuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("NotiAuctionId");

                    b.HasIndex("ProductId");

                    b.ToTable("AuctionProduct");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            AuctionId = 15,
                            ProductId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 100006,
                            AuctionId = 15,
                            ProductId = 20,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 36,
                            AuctionId = 35,
                            ProductId = 30,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 300006,
                            AuctionId = 35,
                            ProductId = 40,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 56,
                            AuctionId = 55,
                            ProductId = 50,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 500006,
                            AuctionId = 55,
                            ProductId = 60,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 76,
                            AuctionId = 75,
                            ProductId = 70,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 700006,
                            AuctionId = 75,
                            ProductId = 80,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 96,
                            AuctionId = 95,
                            ProductId = 90,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 900006,
                            AuctionId = 95,
                            ProductId = 100,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LastPriceOffered")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionUser");

                    b.HasData(
                        new
                        {
                            Id = 30000007,
                            AuctionId = 35,
                            LastPriceOffered = 4.0,
                            UserId = "41"
                        },
                        new
                        {
                            Id = 37,
                            AuctionId = 35,
                            LastPriceOffered = 6.0,
                            UserId = "31"
                        },
                        new
                        {
                            Id = 77,
                            AuctionId = 75,
                            LastPriceOffered = 10.0,
                            UserId = "71"
                        },
                        new
                        {
                            Id = 97,
                            AuctionId = 95,
                            LastPriceOffered = 12.0,
                            UserId = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NotiDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendToUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountLeft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotiBuyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotiSellId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NotiBuyId");

                    b.HasIndex("NotiSellId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("ISProject.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "Descripcion del producto1",
                            Name = "Producto1"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Descripcion del producto2",
                            Name = "Producto2"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Descripcion del producto3",
                            Name = "Producto3"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Descripcion del producto4",
                            Name = "Producto4"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Descripcion del producto5",
                            Name = "Producto5"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Descripcion del producto6",
                            Name = "Producto6"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Descripcion del producto7",
                            Name = "Producto7"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Descripcion del producto8",
                            Name = "Producto8"
                        },
                        new
                        {
                            Id = 90,
                            Description = "Descripcion del producto9",
                            Name = "Producto9"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Descripcion del producto10",
                            Name = "Producto10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("ProductSale");

                    b.HasData(
                        new
                        {
                            Id = 1003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductId = 10,
                            SellerId = "12",
                            Units = 2
                        },
                        new
                        {
                            Id = 2003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductId = 20,
                            SellerId = "22",
                            Units = 3
                        },
                        new
                        {
                            Id = 3003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 9.0,
                            ProductId = 30,
                            SellerId = "32",
                            Units = 4
                        },
                        new
                        {
                            Id = 4003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 9.0,
                            ProductId = 40,
                            SellerId = "42",
                            Units = 5
                        },
                        new
                        {
                            Id = 5003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10.0,
                            ProductId = 50,
                            SellerId = "52",
                            Units = 6
                        },
                        new
                        {
                            Id = 6003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10.0,
                            ProductId = 60,
                            SellerId = "62",
                            Units = 7
                        },
                        new
                        {
                            Id = 7003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 70,
                            SellerId = "72",
                            Units = 8
                        },
                        new
                        {
                            Id = 8003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 80,
                            SellerId = "82",
                            Units = 9
                        },
                        new
                        {
                            Id = 9003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 12.0,
                            ProductId = 90,
                            SellerId = "92",
                            Units = 10
                        },
                        new
                        {
                            Id = 10003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 12.0,
                            ProductId = 100,
                            SellerId = "102",
                            Units = 11
                        },
                        new
                        {
                            Id = 80003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 10,
                            SellerId = "82",
                            Units = 9
                        });
                });

            modelBuilder.Entity("ISProject.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductSaleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0Customer",
                            ConcurrencyStamp = "3ff4d78d-c2a0-4e35-83b9-bc64a5a97679",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "a18be9c0Manager",
                            ConcurrencyStamp = "d727cd73-b934-4c78-bf96-18dbd0624c51",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "a18be9c0Seller",
                            ConcurrencyStamp = "f306b766-42e2-48c8-8d42-c8ba91f0491f",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "11",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "51",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "52",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "61",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "62",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "71",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "72",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "81",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "82",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "91",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "92",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21123111111",
                            RoleId = "a18be9c0Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ISProject.Models.NotiAuction", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("AuctionHeaderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasIndex("AuctionHeaderID");

                    b.HasDiscriminator().HasValue("NotiAuction");
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("OrderHeaderID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OrderHeaderID");

                    b.HasDiscriminator().HasValue("NotiBuy");
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasIndex("UserID");

                    b.HasDiscriminator().HasValue("NotiRole");

                    b.HasData(
                        new
                        {
                            Id = 34,
                            Message = "Customer3 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "31"
                        },
                        new
                        {
                            Id = 64,
                            Message = "Customer6 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "61"
                        },
                        new
                        {
                            Id = 94,
                            Message = "Customer9 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.NotiSell", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.HasDiscriminator().HasValue("NotiSell");
                });

            modelBuilder.Entity("ISProject.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c109a78-4530-4ea3-808d-4cd1b20bec42",
                            Email = "Customer1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER1@FAKE.COM",
                            NormalizedUserName = "CUSTOMER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFP2I7v9GlTV05LXUwPfr3ewLpaafdDCFmjMyAaaesrAqVk4xLWuXsGn3APeYeZCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1bf858b-cdb6-48d8-9058-c7b4f43e9674",
                            TwoFactorEnabled = false,
                            UserName = "Customer1@fake.com",
                            Name = "Customer1"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8eeaeffa-3da8-4306-8ec0-d65416ddd61d",
                            Email = "Customer2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER2@FAKE.COM",
                            NormalizedUserName = "CUSTOMER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIZT0ktS1ziKoJh715FLa05Ay++LvUPs19PY/NdSvAInUiARD/8waEUfRGQDTw2JnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3426eac-18b0-4482-a04c-3f47bb308e16",
                            TwoFactorEnabled = false,
                            UserName = "Customer2@fake.com",
                            Name = "Customer2"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0581e598-5cc1-47ea-82f2-0fd59486ef1e",
                            Email = "Customer3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER3@FAKE.COM",
                            NormalizedUserName = "CUSTOMER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFRLOQ9bCq+TRUJTgc1kuBg0eoBBkD7stKKkUx+g40E8lF9EHqKow58KVow6HZ8yaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "907cb385-3fb8-4b2d-a882-e947d64b0df0",
                            TwoFactorEnabled = false,
                            UserName = "Customer3@fake.com",
                            Name = "Customer3"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e555b699-1220-4eb4-8897-505327c1921e",
                            Email = "Customer4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER4@FAKE.COM",
                            NormalizedUserName = "CUSTOMER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAKwauEVss+RcY7M/OM6XNeseJpPDinaSj7MtmbEejyY/6BRhxGHWeIZtnd+zL5ZGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca7a63e6-e012-4311-805d-3abdbad41de7",
                            TwoFactorEnabled = false,
                            UserName = "Customer4@fake.com",
                            Name = "Customer4"
                        },
                        new
                        {
                            Id = "51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07eacadd-2a00-44b2-9afb-c0a8bf45e620",
                            Email = "Customer5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER5@FAKE.COM",
                            NormalizedUserName = "CUSTOMER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJsNX2MSUNXyJteg1TBbTsZME+395IbsoNwJSa09v9A7/fS9Y1XQSDoUrRV0FJys7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f9d5917-ee36-4f26-b6a2-5e7768c58704",
                            TwoFactorEnabled = false,
                            UserName = "Customer5@fake.com",
                            Name = "Customer5"
                        },
                        new
                        {
                            Id = "61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "969f570f-9e5b-4fc3-aa52-dd35f7b4955a",
                            Email = "Customer6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER6@FAKE.COM",
                            NormalizedUserName = "CUSTOMER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOpq6fG0dVPnyXyC+abT6s0Lv6k5FtZzCAHoN4HqHOPSYQ3c77Z2j3QBMsQYWI3WGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d388d4ed-74b5-49db-b920-4118508f1d53",
                            TwoFactorEnabled = false,
                            UserName = "Customer6@fake.com",
                            Name = "Customer6"
                        },
                        new
                        {
                            Id = "71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bef6d0d5-1707-4737-bbb3-ec5136783a7b",
                            Email = "Customer7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER7@FAKE.COM",
                            NormalizedUserName = "CUSTOMER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHkj0Q/M0kg+TmNsdIgoeoXbmR2d1/w+Yk4MzPU3CmTVcfmU7aahTru39TSjBAvXzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b989be9-cf3a-4a57-b2be-23676c676fdf",
                            TwoFactorEnabled = false,
                            UserName = "Customer7@fake.com",
                            Name = "Customer7"
                        },
                        new
                        {
                            Id = "81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "224f77aa-ac6f-4829-b00c-cff367242551",
                            Email = "Customer8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER8@FAKE.COM",
                            NormalizedUserName = "CUSTOMER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECLPXt26x3hT70xcONsQEpd8tcZJpVft0PKM4nKx8N509IyF1htrEjVLAiU2tr74EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17e1f70e-ef5f-46dc-a6a6-75bebdbc9e7c",
                            TwoFactorEnabled = false,
                            UserName = "Customer8@fake.com",
                            Name = "Customer8"
                        },
                        new
                        {
                            Id = "91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb90497e-56d4-42f0-94b1-5274b523bee6",
                            Email = "Customer9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER9@FAKE.COM",
                            NormalizedUserName = "CUSTOMER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkqD8bDbAfYUDbmXc9HLb9N4CzVIFQxQmWfptpGeUshcRnofoocd91MPgzvy/wNyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9ab8443-dc4d-42c4-9294-57898d8a519e",
                            TwoFactorEnabled = false,
                            UserName = "Customer9@fake.com",
                            Name = "Customer9"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b27249ba-4ca0-4112-a658-159b3ba79010",
                            Email = "Customer10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER10@FAKE.COM",
                            NormalizedUserName = "CUSTOMER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB4QTQwy8ua62Vkz+3sJJwg2voybC780WVFNeBugYfOwQorYR3k0bhtL+2eIbYqybQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fde8c63-376f-4c4c-99ca-2dac178aa72d",
                            TwoFactorEnabled = false,
                            UserName = "Customer10@fake.com",
                            Name = "Customer10"
                        },
                        new
                        {
                            Id = "21123111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e26f808a-4fa5-4641-9902-6bc89ed284e3",
                            Email = "admin@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@FAKE.COM",
                            NormalizedUserName = "ADMIN@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP2C1uCjpD/lYgV/pqSqBXtv4rx2v0TBbjcjQ8uuduM+oub6/DUB56+rT4bd5TAVFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d13ac3d3-88a5-47f7-96e3-bd67fe1d2594",
                            TwoFactorEnabled = false,
                            UserName = "admin@fake.com",
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Seller", b =>
                {
                    b.HasBaseType("ISProject.Models.User");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Seller");

                    b.HasData(
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8df6aa1c-6567-4e09-a033-2fea1f8aca58",
                            Email = "Seller1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER1@FAKE.COM",
                            NormalizedUserName = "SELLER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELigR9LgDokoNlVn7CTb16cHYd9USIWQgJfRX6QDeZjSTjtyfveLq4GmlBjbhCRVvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1776e388-69a1-459f-b397-b0e559006587",
                            TwoFactorEnabled = false,
                            UserName = "Seller1@fake.com",
                            Name = "Seller1",
                            Rating = 0
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d480d446-7b18-4eda-ac1c-cd60985a8ccb",
                            Email = "Seller2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER2@FAKE.COM",
                            NormalizedUserName = "SELLER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyLia0G+wvWnRjXv+VVt4tYMz3hlQTTbCPZK6jQgcUqcuka1ID0PJLZKFd/n3C6OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7da31d56-60dc-47df-92ff-96442e9bc447",
                            TwoFactorEnabled = false,
                            UserName = "Seller2@fake.com",
                            Name = "Seller2",
                            Rating = 0
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6fb8c64-4c5f-4752-aee5-d5d9cab688b3",
                            Email = "Seller3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER3@FAKE.COM",
                            NormalizedUserName = "SELLER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOSMPnn3/fAGE32qLdp8zHjt8A+Raw0z+AlGjK2dQ4S+pVzFdu1ROLsF0XJ3RM2ykA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "821fd67c-3d92-42a6-8b98-61f6d537aac8",
                            TwoFactorEnabled = false,
                            UserName = "Seller3@fake.com",
                            Name = "Seller3",
                            Rating = 0
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbd21639-6e8f-494d-9b70-6e9479e771b6",
                            Email = "Seller4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER4@FAKE.COM",
                            NormalizedUserName = "SELLER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELOyajm/XiSbenG8ejPJEm9Wqr6QpQmOgKsNheg95Dciwn3abd2lmHZHYEpgEmdeDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0751e242-40e4-40ad-8118-db2a69fe29ac",
                            TwoFactorEnabled = false,
                            UserName = "Seller4@fake.com",
                            Name = "Seller4",
                            Rating = 0
                        },
                        new
                        {
                            Id = "52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c404a70d-4d9f-4099-9160-e1cbbfc80a60",
                            Email = "Seller5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER5@FAKE.COM",
                            NormalizedUserName = "SELLER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGyUjflvO9G4h/CUTs5dwTngti665OsuDzg4y3U/0PwuwwWzwmWsVcr6T9cLspyhrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e600f660-e36e-4bdf-8ac7-fb5544e143db",
                            TwoFactorEnabled = false,
                            UserName = "Seller5@fake.com",
                            Name = "Seller5",
                            Rating = 0
                        },
                        new
                        {
                            Id = "62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c468c5b-e3cb-448c-9305-202988492037",
                            Email = "Seller6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER6@FAKE.COM",
                            NormalizedUserName = "SELLER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEClmPfgWoOaX/4b634xro8NN1Y2hvD9uk8q+epMLF/eqjYP2c4j+VWSXd6WmzoFGeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d2bdaa6-b676-423a-ab88-f2c59ddab8a1",
                            TwoFactorEnabled = false,
                            UserName = "Seller6@fake.com",
                            Name = "Seller6",
                            Rating = 0
                        },
                        new
                        {
                            Id = "72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ef4534c-f870-494e-8e04-60a300b38af9",
                            Email = "Seller7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER7@FAKE.COM",
                            NormalizedUserName = "SELLER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPA4+hKK1h0uXXoNVSze0HvTtSi+fSVapApfMLnaeccs6L0i/Pxl8d87qT2TnwoJ9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97a68d67-02bf-462d-bad5-0b0f235f54ff",
                            TwoFactorEnabled = false,
                            UserName = "Seller7@fake.com",
                            Name = "Seller7",
                            Rating = 0
                        },
                        new
                        {
                            Id = "82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8953b4d-ee47-4452-8096-54ae2601d4bd",
                            Email = "Seller8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER8@FAKE.COM",
                            NormalizedUserName = "SELLER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEANnlQn4yx7xijGasQ7mtaDDsUFimwtmdwHTyvRPfb/qmR4NrKTpEuQ6+41XmrPWMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71c8e8c8-c7a2-4a70-9124-8c240a4af82b",
                            TwoFactorEnabled = false,
                            UserName = "Seller8@fake.com",
                            Name = "Seller8",
                            Rating = 0
                        },
                        new
                        {
                            Id = "92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5faaabf-4cb3-49b5-94a8-552ddcf18362",
                            Email = "Seller9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER9@FAKE.COM",
                            NormalizedUserName = "SELLER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfPUCy2NnxTm/7d8SLwbVUqbi9sgdP08pmTsHV+n4QQrVLdkgSK4o8DS8uNoQHSsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cae03fb-8d6c-42c5-9133-4ff75dea80b7",
                            TwoFactorEnabled = false,
                            UserName = "Seller9@fake.com",
                            Name = "Seller9",
                            Rating = 0
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08227276-b59d-4df4-b243-df575183f1f9",
                            Email = "Seller10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER10@FAKE.COM",
                            NormalizedUserName = "SELLER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGuwwNp76zj3FZs0dcv25rszVBh3EUUWt/OhsiCjCZdGAJ62SGu6VygXa5KOOxQ30Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f7f1e99-3ea8-49ae-9715-b0e221f4ba49",
                            TwoFactorEnabled = false,
                            UserName = "Seller10@fake.com",
                            Name = "Seller10",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionHeader", b =>
                {
                    b.HasOne("ISProject.Models.Seller", "User")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.AuctionProduct", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.NotiAuction", null)
                        .WithMany("AuctionProduct")
                        .HasForeignKey("NotiAuctionId");

                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.AuctionUser", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.HasOne("ISProject.Models.NotiBuy", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("NotiBuyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ISProject.Models.NotiSell", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("NotiSellId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.ProductSale", "ProductSale")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiAuction", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
